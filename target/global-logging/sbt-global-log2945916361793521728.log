[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\mrupv\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\mrupv\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.9 (Oracle Corporation Java 1.8.0_401)
[debug] Load.defaultLoad until apply took 134.733ms
[debug]           Load.loadUnit: plugins took 138.9657ms
[debug]           Load.loadUnit: defsScala took 0.3446ms
[debug] [Loading] Scanning directory C:\Users\mrupv\IdeaProjects\Airbnb Spark Analytics\project
[debug]             Load.loadUnit: mkEval took 55.1314ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mrupv\IdeaProjects\Airbnb Spark Analytics\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 16.0484 ms
[info] loading settings for project airbnb-spark-analytics-build from idea.sbt ...
[debug]               Load.resolveProject(airbnb-spark-analytics-build) took 55.2644ms
[debug]             Load.loadTransitive: finalizeProject(Project(id airbnb-spark-analytics-build, base: C:\Users\mrupv\IdeaProjects\Airbnb Spark Analytics\project, plugins: List(<none>))) took 81.2806ms
[debug] [Loading] Done in C:\Users\mrupv\IdeaProjects\Airbnb Spark Analytics\project, returning: (airbnb-spark-analytics-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 5717.898ms
[debug]           Load.loadUnit: cleanEvalClasses took 9.8654ms
[debug]         Load.loadUnit(file:/C:/Users/mrupv/IdeaProjects/Airbnb%20Spark%20Analytics/project/, ...) took 5875.332ms
[debug]       Load.apply: load took 6181.2229ms
[debug]       Load.apply: resolveProjects took 7.5402ms
[debug]       Load.apply: finalTransforms took 94.4468ms
[debug]       Load.apply: config.delegates took 7.5792ms
[debug]       Load.apply: Def.make(settings)... took 593.1722ms
[debug]       Load.apply: structureIndex took 110.3989ms
[debug]       Load.apply: mkStreams took 2.1725ms
[info] loading project definition from C:\Users\mrupv\IdeaProjects\Airbnb Spark Analytics\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 11950.9966ms
[debug]     Load.loadUnit: defsScala took 0.0244ms
[debug] [Loading] Scanning directory C:\Users\mrupv\IdeaProjects\Airbnb Spark Analytics
[debug]       Load.loadUnit: mkEval took 1.2165ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.3504 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 33.2899ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\mrupv\IdeaProjects\Airbnb Spark Analytics, plugins: List(<none>))) took 39.6192ms
[debug] [Loading] Done in C:\Users\mrupv\IdeaProjects\Airbnb Spark Analytics, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2513.829ms
[debug]     Load.loadUnit: cleanEvalClasses took 10.5625ms
[debug]   Load.loadUnit(file:/C:/Users/mrupv/IdeaProjects/Airbnb%20Spark%20Analytics/, ...) took 14478.5195ms
[debug] Load.apply: load took 14682.644ms
[debug] Load.apply: resolveProjects took 0.4915ms
[debug] Load.apply: finalTransforms took 40.0742ms
[debug] Load.apply: config.delegates took 0.4899ms
[debug] Load.apply: Def.make(settings)... took 189.2915ms
[debug] Load.apply: structureIndex took 43.9548ms
[debug] Load.apply: mkStreams took 0.0035ms
[info] set current project to Airbnb Spark Analytics (in build file:/C:/Users/mrupv/IdeaProjects/Airbnb%20Spark%20Analytics/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49809 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49809, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Airbnb Spark Analytics (in build file:/C:/Users/mrupv/IdeaProjects/Airbnb%20Spark%20Analytics/)
[debug] > Exec(idea-shell, None, None)
